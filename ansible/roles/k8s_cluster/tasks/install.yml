---
- set_fact:
    api_server: "{{ ansible_ssh_host }}"
  when: apiserver_address is undefined

- set_fact:
    api_server: "{{ apiserver_address }}"
  when: (apiserver_address is defined) and (apiserver_address|length > 0)

- name: "Include firewalld handlers"
  include_role:
    name: "sec/firewalld"

- name: "Add masquerade to trusted zone"
  firewalld:
    masquerade: True | bool
    zone: "trusted"
    permanent: yes
    state: enabled
  notify: Restart firewalld
  become: yes

- name: Add source network to trusted sources
  firewalld:
    source: "{{ item }}"
    zone: "trusted"
    permanent: yes
    state: enabled
  loop:
    - "{{ pod_subnet }}"
    - "{{ service_subnet }}"
  notify: Restart firewalld
  become: yes

- name: Open k8s known ports
  firewalld:
    port: "{{ item }}"
    zone: "public"
    permanent: yes
    state: enabled
  loop: "{{ firewalld_public_ports }}"
  notify: Restart firewalld
  become: yes

- name: Open k8s known services
  firewalld:
    service: "{{ item }}"
    zone: "public"
    permanent: yes
    state: enabled
  loop: "{{ firewalld_public_services }}"
  notify: Restart firewalld
  become: yes

- name: "Flush handlers"
  meta: flush_handlers

- name: "Add kubernetes repository"
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgcheck: true
    repo_gpgcheck: true
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude: kube*
    state: present
  become: yes
  register: k8s_add_repo_res
  failed_when: "k8s_add_repo_res.rc is defined and k8s_add_repo_res.rc > 0 and k8s_add_repo_res.stderr is defined and 'signature could not be verified for kubernetes' not in k8s_add_repo_res.stderr"

- name: "Add kubernetes repository alternative to GPG key failure"
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgcheck: false
    repo_gpgcheck: false
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    exclude: kube*
    state: present
  become: yes
  register: k8s_add_repo_alt_res
  when: "k8s_add_repo_res is not defined or (k8s_add_repo_res.rc is defined and k8s_add_repo_res.rc > 0 and k8s_add_repo_res.stderr is defined and 'signature could not be verified for kubernetes' in k8s_add_repo_res.stderr)"

- name: "Install Kubernetes packages - {{ k8s_version }}"
  package:
    name: "{{ packages }}"
    state: present
    disable_excludes: kubernetes
  vars:
    packages:
      - kubectl-{{ k8s_version }}
      - kubeadm-{{ k8s_version }}
      - kubelet-{{ k8s_version }}
  become: yes

- name: Disable selinux
  shell: |
    setenforce 0
    sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
    getenforce
  become: yes

- name: Start kubelet
  systemd:
    state: started
    name: kubelet
    daemon_reload: yes
    enabled: yes
  become: yes

- name: Create k8s conf file
  template:
    src: "k8s.conf.j2"
    dest: /etc/sysctl.d/k8s.conf
  become: yes

- name: Make k8s conf file take effect
  command: "sysctl --system"
  become: yes

- name: Pull k8s linux images for version {{ k8s_version }}
  command: "kubeadm config images pull --kubernetes-version {{ k8s_version }}"
  become: yes

- name: Initialize cluster for k8s - {{ k8s_version }}
  command: "kubeadm init --pod-network-cidr={{ pod_subnet }} --apiserver-advertise-address={{ api_server }} --kubernetes-version {{ k8s_version }}"
  register: kubeadm_init_res
  changed_when: "kubeadm_init_res.rc == 0"
  failed_when: "kubeadm_init_res.rc != 0  and 'already exists' not in kubeadm_init_res.stderr"
  become: yes

- name: "Copy config file"
  include_role:
    name: k8s_config
  vars:
    state: "present"

- name: "Install CNI"
  include_tasks: install_cni.yml

- name: Taint the node
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"

- name: Generate ClusterRole file for the sa default and namespace kube-system
  template:
    src: "clusterrole-admin.j2"
    dest: /tmp/clusterrole-admin.yml
  become: yes

- name: Grant Cluster Admin role to the serviceaccount default of kube-system
  shell: |
    kubectl apply -f /tmp/clusterrole-admin.yml

- name: Create persistence volume
  include_tasks: create_single_pv.yml
  vars:
    volume_name: "pv{{ item }}"
  with_sequence: start=1 count=5 format=%03d

...
