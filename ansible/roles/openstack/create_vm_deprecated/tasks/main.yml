---

- name: Generate keys locally and import the pub key into Openstack
  include_tasks: keys.yml
  when: state == "present"

- name: "{{ 'Create' if state == \"present\" else 'Delete' }} {{ openstack.vm.name }} - {{ openstack.vm.title }}"
  os_server:
    state: "{{ state }}"
    auth:
      project_name: "{{ openstack.os_project_name }}"
      username: "{{ openstack.os_username }}"
      password: "{{ openstack.os_password }}"
      user_domain_name: "{{ openstack.os_domain }}"
      project_domain_name: "{{ openstack.os_domain }}"
      auth_url: "{{ openstack.os_auth_url }}"
    name: "{{ openstack.vm.name }}"
    image: "{{ openstack.vm.image }}"
    key_name: "{{ openstack.vm.key_name }}"
    timeout: "{{ openstack.timeout }}"
    flavor: "{{ openstack.vm.flavor }}"
    auto_floating_ip: yes
    network: "{{ openstack.vm.network }}"
    security_groups: "{{ openstack.vm.security_group }}"
    volumes: "{{ openstack.vm.volumes }}"
    boot_from_volume: "{{ openstack.vm.boot_from_volume }}"
  register: openstack_output

- name: Delete key {{ openstack.sshkey_name }} from server
  os_keypair:
    state: absent
    auth:
      project_name: "{{ openstack.os_project_name }}"
      username: "{{ openstack.os_username }}"
      password: "{{ openstack.os_password }}"
      user_domain_name: "{{ openstack.os_domain }}"
      project_domain_name: "{{ openstack.os_domain }}"
      auth_url: "{{ openstack.os_auth_url }}"
    name: "{{ openstack.sshkey_name }}"
  when: state == "absent"

- name: Print Openstack output
  debug:
    var: openstack_output

- block:

  - name: Show IP addresses
    debug:
      msg: "VM IP : {{ openstack_output.server.accessIPv4 }}"

  - set_fact:
      private_key_in_inventory: "{{ lookup('env', 'PWD') }}/inventory/id_openstack.rsa"
      login_username: centos

  - name: Copy private key to inventory
    copy:
      src: "{{ key_path }}"
      dest: ../inventory/id_openstack.rsa
      mode: 0600

  - include_role:
      name: generate_inventory
    vars:
      ip_address: "{{ openstack_output.server.accessIPv4  }}"
      username: "{{ login_username }}"
      keyfile: "{{ private_key_in_inventory }}"
      hostname: "{{ openstack.vm.name }}"
      openshift_origin_version: "3.11"
      openshift_docker_selinux_enabled: false

  - set_fact:
      internal_ssh_command: "ssh -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\" -i {{ private_key_in_inventory }} -tt {{ login_username }}@{{ openstack_output.server.accessIPv4 }}"

  - name: Wait for ssh to come up
    wait_for: host="{{ openstack_output.server.accessIPv4 }}" port=22 delay=10  timeout=300

  - name: Disable selinux
    command: "{{ internal_ssh_command }} \"sudo sed -i 's/^SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config\""

  - name: Make commands under /usr/local/bin accessible to sudoers
    command: "{{ internal_ssh_command }} \"sudo sed -i -e '/secure_path/ s[=.*[&:/usr/local/bin[' /etc/sudoers\""

  - name: Install network manager
    command: "{{ internal_ssh_command }} \"sudo yum install -y NetworkManager\""

#  - name: Install Ansible
#    command: "{{ internal_ssh_command }} \"sudo yum install -y ansible\""

  - name: Install Red-Hat certificates
    command: "{{ internal_ssh_command }} \"sudo yum install -y python-rhsm-certificates\""

#  - name: Install Atomic
#    command: "{{ internal_ssh_command }} \"sudo yum install -y atomic\""

  - name: Remove erroneous certs
    command: "{{ internal_ssh_command }} \"sudo rm -rf /etc/docker/certs.d/registry.access.redhat.com\""

#  - name: Reboot instance
#    command: "{{ internal_ssh_command }} \"sudo reboot\""
#    ignore_errors: true

  - name: Show useful ssh login info
    debug:
      msg:
        - "You can ssh into the newly created VM using the following command:"
        - "ssh -i {{ private_key_in_inventory }} {{ login_username }}@{{ openstack_output.server.accessIPv4 }}"


  when: state == "present"
