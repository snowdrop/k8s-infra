---
- name: "Find admin user home folder"
  local_action: shell echo "{{ lookup('env','HOME') }}"
  register: admin_home

- name: "Set required facts"
  set_fact: 
    key_path: "{{ admin_home.stdout }}/.ssh/id_rsa_snowdrop_openstack_{{ vm_name }}"
    volume_name: "{{ vm_name }}-volume"
  no_log: True

- stat:
    path: "{{ key_path }}"
  register: st

# - name: "Set pass facts from passwordstore"
#   set_fact:
#     openstack_console_user:     "{{ query('passwordstore', 'openstack/host/console_user' )[0] }}"
#     openstack_console_password: "{{ query('passwordstore', 'openstack/host/console_pw ')[0] }}"
#     openstack_os_domain:        "{{ query('passwordstore', 'openstack/host/console_domain ')[0] }}"
#     openstack_os_auth_url: "{{ query('passwordstore', 'openstack/host/os_auth_url')[0] }}"
#     openstack_security_group: "{{ query('passwordstore', 'openstack/host/security_group')[0] }}"

- name: "Gather information about a previously created VM"
  openstack.cloud.server_info:
    auth:
      project_name: "{{ openstack_auth.openstack_project_name }}"
      username: "{{ openstack_auth.openstack_console_user }}"
      password: "{{ openstack_auth.openstack_console_password }}"
      user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
      project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
      auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
    filters:
      name: "{{ vm_name }}"
  register: server_info_result

- name: "Print Openstack output"
  debug:
    var: server_info_result
    verbosity: 2

- name: "Only proceed if vm exists and state is present"
  block:
  - name: "Generate keys locally and import the pub key into Openstack"
    include_tasks: keys.yml
    when: state == "present"

  - name: "Create VM volume"
    openstack.cloud.volume:
      auth:
        project_name: "{{ openstack_auth.openstack_project_name }}"
        username: "{{ openstack_auth.openstack_console_user }}"
        password: "{{ openstack_auth.openstack_console_password }}"
        user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
        project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
        auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      state: present
      size: "{{ flavours[openstack.vm.flavor].disk_size | default(40) }}"
      display_name: "{{ volume_name }}"
      volume_type: "ceph"

  - name: "Create VM instance"
    os_server:
      auth:
        project_name: "{{ openstack_auth.openstack_project_name }}"
        username: "{{ openstack_auth.openstack_console_user }}"
        password: "{{ openstack_auth.openstack_console_password }}"
        user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
        project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
        auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      name: "{{ vm_name }}"
      image: "{{ openstack.vm.image }}"
      key_name: "{{ vm_name }}"
      state: "{{ state }}"
      timeout: "{{ openstack.timeout }}"
      flavor: "{{ openstack.vm.flavor }}"
      auto_floating_ip: yes
      network: "{{ openstack.vm.network }}"
      security_groups: "{{ openstack_security_group }}"
      volumes: "{{ volume_name }}"
      boot_from_volume: "{{ openstack.vm.boot_from_volume }}"
    register: openstack_output

  - name: "Print Openstack output"
    debug:
      var: openstack_output

  - name: "Store host IP on passwordstore"
    set_fact:
      openstack_vm_ipv4: "{{ openstack_output.server.accessIPv4 }}"

  - name: "Show IP addresses"
    debug:
      msg: "VM IP : {{ openstack_output['accessIPv4'] }}"

  # - name: "Store host IP on passwordstore"
  #   set_fact:
  #     openstack_vm_ipv4: "{{ query('passwordstore', 'openstack/' + vm_name + '/ansible_ssh_host create=True userpass=' + openstack_output.server.accessIPv4 )[0] }}"

  # - block:

  #   - name: "Wait for boot"
  #     ansible.builtin.wait_for:
  #       host: "{{ openstack_vm_ipv4 }}"
  #       port: "{{ query('passwordstore', 'openstack/' + vm_name + '/ansible_ssh_port')[0] }}"
  #       delay: 5
  #       timeout: 120
  #     register: wait_for_reg

  #   - name: "Show wait_for_reg output"
  #     debug:
  #       msg: "wait_for : {{ wait_for_reg }}"
  #       verbosity: 2

  #   - name: "Get the host public key"
  #     shell: "ssh-keyscan -t rsa {{ openstack_vm_ipv4 }}"
  #     register: ssh_keyscan_res

  #   - name: "Show ssh-keyscan output"
  #     debug:
  #       msg: "VM IP : {{ ssh_keyscan_res }}"
  #       verbosity: 1

  #   - name: "Add the host to known_hosts"
  #     known_hosts:
  #       name: "{{ openstack_vm_ipv4 }}"
  #       key: "{{ ssh_keyscan_res.stdout }}"
  #       state: present

  #   rescue:
  #     - name: "Remove vm"
  #       include_tasks: vm_remove.yml

  #     - name: "Remove passwordstore entry"
  #       shell: "pass rm -r /openstack/{{ vm_name }}"

  # when: "server_info_result.openstack_servers is undefined or (server_info_result.openstack_servers|length == 0)"
...
