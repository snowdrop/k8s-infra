---
- name: Find admin user home folder
  local_action: shell echo "{{ lookup('env','HOME') }}"
  register: admin_home

- name: Set admin ssh key path
  set_fact: 
    key_path: "{{ admin_home.stdout }}/.ssh/id_rsa_snowdrop_openstack_{{ vm_name }}"
    volume_name: "{{ vm_name }}-volume"
  no_log: True

- stat:
    path: "{{ key_path }}"
  register: st

- name: "Set pass facts from passwordstore"
  set_fact:
    openstack_console_user:     "{{ query('passwordstore', '/openstack/host/console_user' )[0] }}"
    openstack_console_password: "{{ query('passwordstore', '/openstack/host/console_pw ')[0] }}"
    openstack_os_domain:        "{{ query('passwordstore', '/openstack/host/console_domain ')[0] }}"
    openstack_os_auth_url: "{{ query('passwordstore', 'openstack/host/os_auth_url')[0] }}"
    openstack_security_group: "{{ query('passwordstore', 'openstack/host/security_group')[0] }}"
    # openstack_console_user: "{{ openstack.os_username }}"
    # openstack_console_password: "{{ openstack.os_password }}"

- name: "Gather information about a previously created image named {{ vm_name }}"
  openstack.cloud.server_info:
    auth:
      project_name: "{{ openstack.os_project_name }}"
      username: "{{ openstack_console_user }}"
      password: "{{ openstack_console_password }}"
      user_domain_name: "{{ openstack_os_domain }}"
      project_domain_name: "{{ openstack_os_domain }}"
      # auth_url: "{{ openstack.os_auth_url }}"
      auth_url: "{{ openstack_os_auth_url }}"
    filters:
      name: "{{ vm_name }}"
  register: server_info_result

- name: Print Openstack output
  debug:
    var: server_info_result

- name: Only proceed if vm exists and state is present
  block:
  - name: Generate keys locally and import the pub key into Openstack
    include_tasks: keys.yml
    when: state == "present"

  - name: "Create VM volume"
    openstack.cloud.volume:
      auth:
        project_name: "{{ openstack.os_project_name }}"
        username: "{{ openstack_console_user }}"
        password: "{{ openstack_console_password }}"
        user_domain_name: "{{ openstack_os_domain }}"
        project_domain_name: "{{ openstack_os_domain }}"
        auth_url: "{{ openstack_os_auth_url }}"
      state: present
      # cloud: "nova"
      size: "{{ flavours[openstack.vm.flavor].disk_size }}"
      display_name: "{{ volume_name }}"
      volume_type: "ceph"

  - name: "{{ 'Create' if state == \"present\" else 'Delete' }} {{ vm_name }} - {{ openstack.vm.title }}"
    os_server:
      state: "{{ state }}"
      auth:
        project_name: "{{ openstack.os_project_name }}"
        # username: "{{ openstack.os_username }}"
        # password: "{{ openstack.os_password }}"
        username: "{{ openstack_console_user }}"
        password: "{{ openstack_console_password }}"
        # user_domain_name: "{{ openstack.os_domain }}"
        # project_domain_name: "{{ openstack.os_domain }}"
        user_domain_name: "{{ openstack_os_domain }}"
        project_domain_name: "{{ openstack_os_domain }}"
        # auth_url: "{{ openstack.os_auth_url }}"
        auth_url: "{{ openstack_os_auth_url }}"
      name: "{{ vm_name }}"
      image: "{{ openstack.vm.image }}"
      key_name: "{{ openstack.vm.key_name }}"
      timeout: "{{ openstack.timeout }}"
      flavor: "{{ openstack.vm.flavor }}"
      auto_floating_ip: yes
      network: "{{ openstack.vm.network }}"
      security_groups: "{{ openstack_security_group }}"
      volumes: "{{ openstack.vm.volumes }}"
      boot_from_volume: "{{ openstack.vm.boot_from_volume }}"
    register: openstack_output

  - name: Print Openstack output
    debug:
      var: openstack_output

  - name: "Establish openstack facts"
    set_fact:
      openstack_vm_ipv4: "{{ openstack_output.server.accessIPv4 }}"

  - block:

    - name: Show IP addresses
      debug:
        msg: "VM IP : {{ openstack_vm_ipv4 }}"

    # - name: Copy private key to inventory
    #   copy:
    #     src: "{{ key_path }}"
    #     dest: ../inventory/id_openstack.rsa
    #     mode: 0600

    # - set_fact:
        # private_key_in_inventory: "{{ lookup('env', 'PWD') }}/ansible/inventory/id_openstack.rsa"
        # login_username: centos

    # - name: "Add host to passwordstore inventory"
    #   include_role:
    #     name: "passstore/ansible_inventory"
    #     apply:
    #       tags:
    #         - always
    #   vars:
    #     pass_provider: openstack
    #     pass_l1: ""
    #     pass_l2: "openstack"
    #     pass_l3: "{{ openstack.vm.name }}"
    #     os_user: "centos"
    #     os_password: "{{ openstack_output.server.adminPass }}"
    #     ansible_ssh_host: "{{ openstack_vm_ipv4 }}"
    #     ansible_ssh_port: "22"
    #     # id_rsa: "{{ rsa_key }}"
    #     # id_rsa_pub: "{{ rsa_key_pub }}"
    #     skip_rsa: true
    #     operation: "fill"

    # - include_role:
    #     name: generate_inventory
    #   vars:
    #     ip_address: "{{ openstack_vm_ipv4  }}"
    #     username: "{{ login_username }}"
    #     # keyfile: "{{ private_key_in_inventory }}"
    #     keyfile: "{{ key_path }}"
    #     hostname: "{{ openstack.vm.name }}"
    #     openshift_origin_version: "3.11"
    #     openshift_docker_selinux_enabled: false

    - name: "Wait for boot"
      wait_for:
        host: "{{ openstack_vm_ipv4 }}"
        port: 22
        delay: 120

    - name: "Get the host public key"
      shell: "ssh-keyscan -t rsa {{ openstack_vm_ipv4 }}"
      register: ssh_keyscan_res

    - name: "Show ssh-keyscan output"
      debug:
        msg: "VM IP : {{ ssh_keyscan_res }}"

    - name: "Add the host to known_hosts"
      known_hosts:
        name: "{{ openstack_vm_ipv4 }}"
        key: "{{ ssh_keyscan_res.stdout }}"
        state: present

    rescue:
      - name: Remove vm
        include_tasks: vm_remove.yml

      - name: Remove passwordstore entry
        shell: "pass rm -r /openstack/{{ vm_name }}"

  when: "server_info_result.openstack_servers is undefined or (server_info_result.openstack_servers|length == 0)"
...