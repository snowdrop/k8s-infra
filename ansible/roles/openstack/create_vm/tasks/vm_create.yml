---
# TODO: Check if the volume exists

- name: Only proceed if vm exists and state is present
  block:
  - name: Generate keys locally and import the pub key into Openstack
    include_tasks: keys.yml
    when: state == "present"

  - name: "{{ 'Create' if state == \"present\" else 'Delete' }} {{ openstack.vm.name }} - {{ openstack.vm.title }}"
    os_server:
      state: "{{ state }}"
      auth:
        project_name: "{{ openstack.os_project_name }}"
        # username: "{{ openstack.os_username }}"
        # password: "{{ openstack.os_password }}"
        username: "{{ openstack_console_user }}"
        password: "{{ openstack_console_password }}"
        # user_domain_name: "{{ openstack.os_domain }}"
        # project_domain_name: "{{ openstack.os_domain }}"
        user_domain_name: "{{ openstack_os_domain }}"
        project_domain_name: "{{ openstack_os_domain }}"
        auth_url: "{{ openstack.os_auth_url }}"
      name: "{{ openstack.vm.name }}"
      image: "{{ openstack.vm.image }}"
      key_name: "{{ openstack.vm.key_name }}"
      timeout: 200
      flavor: "{{ openstack.vm.flavor }}"
      auto_floating_ip: yes
      network: "{{ openstack.vm.network }}"
      security_groups: "{{ openstack.vm.security_group }}"
      volumes: "{{ openstack.vm.volumes }}"
      boot_from_volume: "{{ openstack.vm.boot_from_volume }}"
    register: openstack_output

  - name: Print Openstack output
    debug:
      var: openstack_output

  - name: "Establish openstack facts"
    set_fact:
      openstack_vm_ipv4: "{{ openstack_output.server.accessIPv4 }}"

  - block:

    - name: Show IP addresses
      debug:
        msg: "VM IP : {{ openstack_vm_ipv4 }}"

    # - name: Copy private key to inventory
    #   copy:
    #     src: "{{ key_path }}"
    #     dest: ../inventory/id_openstack.rsa
    #     mode: 0600

    - set_fact:
        # private_key_in_inventory: "{{ lookup('env', 'PWD') }}/ansible/inventory/id_openstack.rsa"
        login_username: centos

    - name: "Add host to passwordstore inventory"
      include_role:
        name: "passstore/ansible_inventory"
        apply:
          tags:
            - always
      vars:
        pass_provider: openstack
        pass_l1: ""
        pass_l2: "openstack"
        pass_l3: "{{ openstack.vm.name }}"
        os_user: "centos"
        os_password: "{{ openstack_output.server.adminPass }}"
        ansible_ssh_host: "{{ openstack_vm_ipv4 }}"
        ansible_ssh_port: "22"
        # id_rsa: "{{ rsa_key }}"
        # id_rsa_pub: "{{ rsa_key_pub }}"
        skip_rsa: true
        operation: "fill"

    - include_role:
        name: generate_inventory
      vars:
        ip_address: "{{ openstack_vm_ipv4  }}"
        username: "{{ login_username }}"
        # keyfile: "{{ private_key_in_inventory }}"
        keyfile: "{{ key_path }}"
        hostname: "{{ openstack.vm.name }}"
        openshift_origin_version: "3.11"
        openshift_docker_selinux_enabled: false

    - name: "Wait for boot"
      wait_for:
        host: "{{ openstack_vm_ipv4 }}"
        port: 22
        delay: 120

    - name: "Get the host public key"
      shell: "ssh-keyscan -t rsa {{ openstack_vm_ipv4 }}"
      register: ssh_keyscan_res

    - name: "Show ssh-keyscan output"
      debug:
        msg: "VM IP : {{ ssh_keyscan_res }}"

    - name: "Add the host to known_hosts"
      known_hosts:
        name: "{{ openstack_vm_ipv4 }}"
        key: "{{ ssh_keyscan_res.stdout }}"
        state: present

    # - set_fact:
    #     internal_ssh_command: "ssh -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\" -i {{ key_path }} -tt {{ login_username }}@{{ openstack_output.server.accessIPv4 }}"

    # - name: Disable selinux
    #   command: "{{ internal_ssh_command }} \"sudo sed -i 's/^SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config\""

    # - name: Make commands under /usr/local/bin accessible to sudoers
    #   command: "{{ internal_ssh_command }} \"sudo sed -i -e '/secure_path/ s[=.*[&:/usr/local/bin[' /etc/sudoers\""

    # - name: Install network manager
    #   command: "{{ internal_ssh_command }} \"sudo yum install -y NetworkManager\""

    # - name: Install Ansible
    #   command: "{{ internal_ssh_command }} \"sudo yum install -y ansible\""

    # - name: Install Red-Hat certificates
    #   command: "{{ internal_ssh_command }} \"sudo yum install -y python-rhsm-certificates\""

    # - name: Install Atomic
    #   command: "{{ internal_ssh_command }} \"sudo yum install -y atomic\""

    # - name: Remove erroneous certs
    #   command: "{{ internal_ssh_command }} \"sudo rm -rf /etc/docker/certs.d/registry.access.redhat.com\""

    # - name: Reboot instance
    #   command: "{{ internal_ssh_command }} \"sudo reboot\""
    #   ignore_errors: true

    # - name: Show useful ssh login info
    #   debug:
    #     msg:
    #       - "You can ssh into the newly created VM using the following command:"
    #       - "ssh -i {{ private_key_in_inventory }} {{ login_username }}@{{ openstack_output.server.accessIPv4 }}"

    rescue:
      - name: Remove vm
        include_tasks: vm_remove.yml

      - name: Remove passwordstore entry
        shell: "pass rm -r /openstack/{{ openstack.vm.name }}"

  when: "server_info_result.openstack_servers is undefined or (server_info_result.openstack_servers|length == 0)"