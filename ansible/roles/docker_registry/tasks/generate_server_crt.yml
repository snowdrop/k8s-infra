- name: Install cfssl tool
  include_role:
    name: cfssl_tool

- name: Get Kube Registry Service ClusterIP
  command: "{{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config get service/{{ k8s_dns_service_name }} -n kube-system -o jsonpath='{.spec.clusterIP}'"
  register: registry_ip_address

- name: Set fact
  set_fact:
    registry_ip: registry_ip_address.stdout

- name: Delete any previous CSR send to k8s
  command: "{{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config delete csr {{ registry.service_name }}.{{ registry.namespace }}"
  ignore_errors: true

- name: Copy cfssljson file with the Hosts names and IP addresses to be certified
  template:
    src: "cfssl.json.j2"
    dest: /tmp/cfssl.json

- name: Display cfssl file generated
  command: cat /tmp/cfssl.json
  register: result

- name: Show result
  debug:
    var: result.stdout

- name: Generate the pem and csr files
  shell: |
    cat /tmp/cfssl.json | /usr/local/bin/cfssl genkey - | /usr/local/bin/cfssljson -bare server

- name: Convert Self Signed Certificate to base64 string
  shell: |
    cat server.csr | base64 | tr -d '\n'
  register: csr_base64

- name: Copy CertificateSigningRequest file
  template:
    src: "csr.yml.j2"
    dest: /tmp/csr.yml

# - name: Display file
#   command: cat /tmp/csr.yml
#   register: result
#
# - name: Show result
#   debug:
#     var: result.stdout

- name: Create a CertificateSigningRequest on the k8s cluster
  shell: |
    {{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config apply -f /tmp/csr.yml

- name: Approve the CSR request
  command: "{{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config certificate approve {{ registry.service_name}}.{{ registry.namespace }}"

- name: Get the server certificate
  shell: |
    {{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config get csr {{ registry.service_name}}.{{ registry.namespace }} -o jsonpath='{.status.certificate}' | base64 --decode > server.crt

- name: Append the CA Certificate to the Server crt"
  shell: |
    cat /etc/kubernetes/pki/ca.crt >> server.crt

- name: "Creates Docker cert directory for the registry : {{ registry.service_name}}.{{ registry.namespace }}.svc:5000"
  file:
    path: /etc/docker/certs.d/{{ registry.service_name}}.{{ registry.namespace }}.svc:5000
    state: directory
  become: yes

- name: "Add the certificate populated for the registry to the certificates supported by the docker daemon"
  shell: |
    cp server.crt /etc/docker/certs.d/{{ registry.service_name}}.{{ registry.namespace }}.svc:5000/
  become: yes

- name: "Add the certificate populated for the registry to the certificates directory watched by containerd"
  shell: |
     cp server.crt /etc/pki/tls/certs
  become: yes

- name: Create a secret to mount the self signed Certificate and Private key
  shell: |
    {{ client_tool }} --kubeconfig={{ ansible_user_dir }}/.kube/config create secret generic cert-key -n {{ registry.namespace }} --from-file=server.crt --from-file=server-key.pem
  become: yes

- name: Add IP address of the Registry to the /etc/hosts/file
  lineinfile:
    path: /etc/hosts
    regexp: '{{ registry_ip_address.stdout }} {{ registry.service_name}}.{{ registry.namespace }} {{ registry.service_name}}.{{ registry.namespace }}.svc {{ registry.service_name}}.{{ registry.namespace }}.svc.cluster {{ registry.service_name}}.{{ registry.namespace }}.cluster.local'
    line: '{{ registry_ip_address.stdout }} {{ registry.service_name}}.{{ registry.namespace }} {{ registry.service_name}}.{{ registry.namespace }}.svc {{ registry.service_name}}.{{ registry.namespace }}.svc.cluster {{ registry.service_name}}.{{ registry.namespace }}.cluster.local'
    state: present
    backup: yes
  register: etchostsupdate
  become: yes

