---
# tasks for hetzner/create_server
# Requires:
#   - user_pw: Password for the OS user.
#   - vm_key_name: Name for the created SSH key

# - name: Get server public key from pass
#   set_fact:
#     hetzner_public_key: "{{ lookup('passwordstore', 'hetzner/id_rsa.pub' ) }}"
#   when: "override_public_key is not defined"

# - name: Get server public key from file
#   set_fact:
#     hetzner_public_key: "{{ lookup('file', override_public_key ) }}"
#   when: "override_public_key is defined"

# - name: "Get user password from pass"
#   set_fact:
#     user_pw: "{{ query('passwordstore', 'hetzner/'+vm_name+'/os_password')[0] }}"

- name: "Print parameters"
  debug:
    msg: "{{ item }}"
  with_items:
    - "user_pw: {{ user_pw }}"
    # - "salt_text: {{ salt_text }}"
    # - "salt_text_16: {{ salt_text[:16] }}"
    # - 'salt_text: {{ salt_text[:16] | default(None) | regex_replace("[^\.\/a-zA-Z0-9] }}'

- name: Hash user password
  set_fact:
    hashed_user_pw: '{{ user_pw | password_hash("sha512", salt_text[:16] | default(None) | regex_replace("[^\.\/a-zA-Z0-9]", "x"), rounds=10000 ) }}'

- name: Get user home
  shell: "echo ${HOME}"
  register: user_home_res
  changed_when: False

- name: Set user home
  set_fact:
    user_home: "{{ user_home_res.stdout }}"
    # ssh_public_key: "{{ query('passwordstore', 'hetzner/' + vm_name + '/id_rsa.pub returnall=true')[0] }}"

- name: Template cloudinit file
  template:
    src: templates/user-data.j2
    dest: /tmp/user-data

- name: Create cloud instance
  shell: "hcloud server create --name {{ vm_name }} --type {{ server_type | default ('cx31') }} --image {{ vm_image | default ('centos-7') }} --ssh-key {{ vm_key_name }} --user-data-from-file /tmp/user-data"
  register: hcloud_server_create_res
  changed_when: "hcloud_server_create_res.rc == 0 or 'uniqueness_error' in hcloud_server_create_res.stderr"
  failed_when: "hcloud_server_create_res.rc == 1 and 'uniqueness_error' not in hcloud_server_create_res.stderr"

- name: Collect server information
  command: "hcloud server describe {{ vm_name }} -o json"
  register: hetzner_describe_res

- name: Parse server information from hetzner
  set_fact:
    hetzner_describe: "{{ hetzner_describe_res.stdout | from_json }}"

- name: Set ip address
  set_fact:
    ip_address: "{{ hetzner_describe.public_net.ipv4.ip }}"

- name: "Clear known hosts for this server if it is newlly created"
  known_hosts:
    path: "{{ user_home + '/.ssh/known_hosts' }}"
    name: "{{ ip_address }}"
    state: absent
  when: "hcloud_server_create_res.rc == 0"

# - name: "Add the server to the known_hosts file"
#   known_hosts:
#     path: "{{ user_home + '/.ssh/known_hosts' }}"
#     name: "{{ ip_address }}"
#     key: "{{ ip_address }} {{ ssh_public_key }}"
#     state: present
#   when: "hcloud_server_create_res.rc == 0"

...
