---
- name: "Set required facts"
  set_fact: 
    volume_name: "{{ vm_name }}-volume"
  no_log: True

- name: "Gather information about a previously created VM"
  openstack.cloud.server_info:
    auth:
      project_name: "{{ openstack_auth.openstack_project_name }}"
      username: "{{ openstack_auth.openstack_console_user }}"
      password: "{{ openstack_auth.openstack_console_password }}"
      user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
      project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
      auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
    filters:
      name: "{{ vm_name }}"
  register: server_info_result

- name: "Print Openstack output"
  debug:
    var: server_info_result
    verbosity: 2

- name: "DEBUG"
  debug:
    msg: "{{ item }}"
  with_items:
  - "if: {{ state == 'present' and key_name is not defined }}"

- name: "Only proceed if vm exists and state is present"
  block:
  
  - name: "Generate keys locally and import the pub key into Openstack"
    include_tasks: keys.yml
    when: "state == 'present' and (use_generic_ssh_key is defined and not use_generic_ssh_key) and (key_name is not defined or key_name | length == 0)"

  - name: "Create VM volume"
    openstack.cloud.volume:
      auth:
        project_name: "{{ openstack_auth.openstack_project_name }}"
        username: "{{ openstack_auth.openstack_console_user }}"
        password: "{{ openstack_auth.openstack_console_password }}"
        user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
        project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
        auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      state: present
      # display_name: "{{ volume_name }}"
      # size: "{{ flavours[openstack.vm.flavor].disk_size | default(40) }}"
      display_name: "{{ ocp_vm_volume_item.name }}"
      size: "{{ ocp_vm_volume_item.size }}"
      volume_type: "ceph"
    loop: "{{ openstack.vm.volumes }}"
    loop_control:
      loop_var: ocp_vm_volume_item
    when: openstack.vm.volumes is defined

  - name: "Get information about keypairs using optional parameters"
    openstack.cloud.keypair_info:
      auth:
        project_name: "{{ openstack_auth.openstack_project_name }}"
        username: "{{ openstack_auth.openstack_console_user }}"
        password: "{{ openstack_auth.openstack_console_password }}"
        user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
        project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
        auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      name: "{{ key_name | default(default_generic_key_name) }}"
    register: keypair_info

  - name: "Print key information"
    debug:
      msg: "{{ keypair_info | default(default_generic_key_name) }}"

  - name: "Create VM instance"
    openstack.cloud.server:
      auth:
        project_name: "{{ openstack_auth.openstack_project_name }}"
        username: "{{ openstack_auth.openstack_console_user }}"
        password: "{{ openstack_auth.openstack_console_password }}"
        user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
        project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
        auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      name: "{{ vm_name }}"
      image: "{{ openstack.vm.image }}"
      key_name: "{{ key_name | default(default_generic_key_name) }}"
      state: "{{ state }}"
      timeout: "{{ openstack.timeout | default(openstack_defaults.timeout) }}"
      flavor: "{{ openstack.vm.flavor }}"
      auto_floating_ip: yes
      network: "{{ openstack.vm.network | default('') }}"
      security_groups: "{{ openstack_security_group }}"
      volumes: "{% if openstack.vm.volumes is defined %}{{ openstack.vm.volumes | map(attribute='name') }}{% else %}{{ [] }}{% endif %}"
      boot_from_volume: "{{ openstack.vm.boot_from_volume  | default(openstack_defaults.vm.boot_from_volume) }}"
      userdata: |
        #cloud-config
        users:
        - default
        - name: snowdrop
          groups: [wheel, adm, systemd-journal]
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh_authorized_keys:
            - {{ keypair_info['keypairs'][0]['public_key'] }}
    register: openstack_output

  - name: "Print Openstack output"
    ansible.builtin.debug:
      var: openstack_output

  - name: "Collect host IP"
    ansible.builtin.set_fact:
      openstack_vm_ipv4: "{{ openstack_output.server.addresses[ openstack.vm.network ][0].addr }}"

  - name: "Show IP addresses"
    ansible.builtin.debug:
      msg: "VM IP : {{ openstack_vm_ipv4 }}"

...
