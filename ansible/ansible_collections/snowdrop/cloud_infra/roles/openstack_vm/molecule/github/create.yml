---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  pre_tasks:
    - name: "Set test facts"
      ansible.builtin.set_fact:
        vm_name: ansible_molecule_snowdrop_openstack_test

    - name: Include default vars
      ansible.builtin.include_vars:
        file: defaults/main.yml
        # name: role_defaults

    - name: List all images
      openstack.cloud.image_info:
        auth:
          project_name: "{{ openstack_auth.openstack_project_name }}"
          username: "{{ openstack_auth.openstack_console_user }}"
          password: "{{ openstack_auth.openstack_console_password }}"
          user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
          project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
          auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      register: rhos_image_list

    - name: Print RHOS images
      ansible.builtin.debug:
        var: rhos_image_list

    - name: List all flavors
      openstack.cloud.compute_flavor_info:
        auth:
          project_name: "{{ openstack_auth.openstack_project_name }}"
          username: "{{ openstack_auth.openstack_console_user }}"
          password: "{{ openstack_auth.openstack_console_password }}"
          user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
          project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
          auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      register: rhos_flavor_list

    - name: Print RHOS flavors
      ansible.builtin.debug:
        var: rhos_flavor_list

    - name: List all networks
      openstack.cloud.networks_info:
        auth:
          project_name: "{{ openstack_auth.openstack_project_name }}"
          username: "{{ openstack_auth.openstack_console_user }}"
          password: "{{ openstack_auth.openstack_console_password }}"
          user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
          project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
          auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      register: rhos_network_list

    - name: Print RHOS networks
      ansible.builtin.debug:
        var: rhos_network_list

    - name: List all security groups
      openstack.cloud.security_group_info:
        auth:
          project_name: "{{ openstack_auth.openstack_project_name }}"
          username: "{{ openstack_auth.openstack_console_user }}"
          password: "{{ openstack_auth.openstack_console_password }}"
          user_domain_name: "{{ openstack_auth.openstack_user_domain }}"
          project_domain_name: "{{ openstack_auth.openstack_project_domain }}"
          auth_url: "{{ openstack_auth.openstack_os_auth_url }}"
      register: rhos_security_group_list

    - name: Print RHOS security groups
      ansible.builtin.debug:
        var: rhos_security_group_list

    - name: "Set openstack VM required facts"
      ansible.builtin.set_fact:
        openstack: 
          vm: 
            network: "{{ rhos_network_list.networks[0].name | default('') }}"
            image: "{{ rhos_image_list.images[0].name | default(openstack_defaults.vm.image) }}"
            flavor: "{{ openstack_vm_flavor }}"
        openstack_security_group: "{{ rhos_security_group_list.security_groups[0].id | default('') }}"

  tasks:

    - name: "Create VM"
      ansible.builtin.include_role:
        name: "openstack_vm"
      vars: 
        state: "present"
    
    - name: "Set server changed"
      ansible.builtin.set_fact:
        server:
          changed: true | bool

    - when: server.changed | default(false) | bool
      block:
        - name: Populate instance config dict
          ansible.builtin.set_fact:
            instance_conf_dict: {
              'instance': "{{ }}",
              'address': "{{ }}",
              'user': "{{ }}",
              'port': "{{ }}",
              'identity_file': "{{ }}", }
          with_items: "{{ server.results }}"
          register: instance_config_dict

        - name: Convert instance config dict to a list
          ansible.builtin.set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Dump instance config
          ansible.builtin.copy:
            content: |
              # Molecule managed

              {{ instance_conf | to_json | from_json | to_yaml }}
            dest: "{{ molecule_instance_config }}"
            mode: 0600

...
