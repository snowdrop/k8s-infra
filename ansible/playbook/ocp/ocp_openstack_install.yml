---
- name: "Build OpenStack authentication for v3password"
  ansible.builtin.import_playbook: "../openstack/openstack_auth_passstore_v3password.yml"

- name: "Build GoDaddy authentication, if not provided"
  import_playbook: "../godaddy/godaddy_auth_passwordstore.yml"
  when: use_dns and dns_provider == 'godaddy'

- name: "Get localhost user home"
  hosts: "localhost"
  gather_facts: true

  tasks:

    - name: Get localhost user home
      ansible.builtin.set_fact:
        localhost_user_home: "{{ ansible_env.HOME }}"

- name: "Install host requirements"
  hosts: "{{ ocp_bootstrap_host | default('localhost') }}"
  gather_facts: true
  vars:
    ansible_remote_tmp: /tmp

  tasks:

    - name: Copy public ssh key
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['localhost_user_home'] }}/.ssh/id_rsa_snowdrop_openstack.pub"
        dest: "{{ ansible_env.HOME }}/.ssh/id_rsa_snowdrop_openstack.pub"
        mode: '0600'

    - name: Copy facts from localhost if using bootstrap host
      ansible.builtin.set_fact:
        rhos_auth: "{{ hostvars['localhost']['rhos_auth'] }}"
        rhos_auth_type: "{{ hostvars['localhost']['rhos_auth_type'] }}"
      when: ocp_bootstrap_host is defined

    - name: Copy requirements files to host
      ansible.builtin.copy:
        src: "{{ requirements_file.file_location }}/{{ requirements_file.file_name }}"
        dest: "/tmp/{{ requirements_file.file_name }}"
        mode: '0644'
      loop:
        - {file_name: "requirements.txt", file_location: "../../.."}
        - {file_name: "requirements.yml", file_location: "../../../collections"}
      loop_control:
        loop_var: requirements_file

    # - name: Install required packages
    #   ansible.builtin.package:
    #     name: "{{ package_to_install }}"
    #     state: present
    #   become: true
    #   loop:
    #     - httpd-tools
    #     - python3-pip
    #   loop_control:
    #     loop_var: package_to_install
    #   when: ocp_bootstrap_host is defined

    - name: Install specified python requirements
      ansible.builtin.pip:
        requirements: /tmp/requirements.txt

    - name: Install collections and roles together
      community.general.ansible_galaxy_install:
        type: both
        requirements_file: /tmp/requirements.yml

- name: "Install OCP"
  hosts: "{{ ocp_bootstrap_host | default('localhost') }}"
  gather_facts: true
  vars:
    ansible_remote_tmp: /tmp

  tasks:
    - name: "Deploy OCP"
      ansible.builtin.import_role:
        name: 'ocp_cluster'
      vars:
        state: present

  post_tasks:

    - name: "Executing the post-installation steps"
      ansible.builtin.debug:
        msg:
          - "Executing the post installation steps. If it fails these steps can be executed manually:"
          - "$ ansible-playbook ansible/playbook/ocp/ocp_openstack_install_post.yml -e tmp_directory={{ ocp_cluster.tmp_directory }} -e ocp_root_directory={{ ocp_cluster.ocp_root_directory }} -e ocp_cluster_name={{ ocp_cluster_name }} {% if ocp_bootstrap_host is defined %}-e ocp_bootstrap_host={{ ocp_bootstrap_host }}{{ dns.port }}{% endif %}"

  #   - name: "Base64 encode OCP installation folder"
  #     ansible.builtin.set_fact:
  #       ansible_installation_folder_base64: "{{ lookup('ansible.builtin.file', ocp_cluster.tmp_directory + '/' + ocp_cluster_name + '-data.tar.gz') | b64encode }}"

  #   - name: "Store the OCP installation folder on the passwordstore"
  #     ansible.builtin.set_fact:
  #       ansible_installation_folder_passwordstore: "{{ query('passwordstore', 'openstack/' + ocp_cluster.metadata. + '/install_dir create=True userpass=' + ansible_installation_folder_base64 )[0] }}"

- name: "Post deployment steps"
  ansible.builtin.import_playbook: "ocp_openstack_install_post.yml"

- name: "Deploy Jump Server"
  ansible.builtin.import_playbook: "ocp_openstack_create_jump_server.yml"
  vars:
    vm_name: "{{ ocp_cluster_metadata.infraID }}-jump-server"

- name: "Print cluster info"
  ansible.builtin.import_playbook: "ocp_openstack_info.yml"
  vars:
    vm_name: "{{ ocp_cluster_metadata.infraID }}-jump-server"
...
# ansible-playbook ansible/playbook/ocp/ocp_openstack_install.yml -e ocp_root_directory=/opt/ocp -e ocp_cluster_name=ocp-sdev -e openshift_pull_secret=${OCP_PULL_SECRET} -K
